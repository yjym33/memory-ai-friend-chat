import {
  AgentState,
  EmotionAnalysisResult,
  GoalExtractionResult,
} from '../types/agent-state';
import { EmotionType } from '../entities/emotion.entity';
import { GoalCategory } from '../entities/goal.entity';

export class LifeCoachWorkflow {
  private async loadUserContext(
    state: AgentState,
  ): Promise<Partial<AgentState>> {
    console.log(`[Agent] Loading context for user ${state.userId}`);
    return {
      actions: [
        ...state.actions,
        {
          type: 'emotion_track',
          data: { step: 'context_loaded' },
          timestamp: new Date(),
        },
      ],
    };
  }

  private async analyzeEmotion(
    state: AgentState,
  ): Promise<Partial<AgentState>> {
    console.log(
      `[Agent] Analyzing emotion in message: "${state.currentMessage}"`,
    );
    const emotionResult = this.performEmotionAnalysis(state.currentMessage);
    return {
      detectedEmotions: emotionResult.emotions,
      needsEmotionSupport: emotionResult.emotions.some(
        (e) =>
          (e.type === EmotionType.SAD ||
            e.type === EmotionType.ANXIOUS ||
            e.type === EmotionType.STRESSED) &&
          e.intensity >= 7,
      ),
      actions: [
        ...state.actions,
        {
          type: 'emotion_track',
          data: emotionResult,
          timestamp: new Date(),
        },
      ],
    };
  }

  private async extractGoals(state: AgentState): Promise<Partial<AgentState>> {
    console.log(
      `[Agent] Extracting goals from message: "${state.currentMessage}"`,
    );
    const goalResult = this.performGoalExtraction(state.currentMessage);
    return {
      extractedGoals: goalResult.goals,
      needsGoalCheck: goalResult.goals.length > 0,
      actions: [
        ...state.actions,
        {
          type: 'goal_extract',
          data: goalResult,
          timestamp: new Date(),
        },
      ],
    };
  }

  private async checkFollowUp(state: AgentState): Promise<Partial<AgentState>> {
    console.log(`[Agent] Checking follow-up needs`);
    return {
      shouldFollowUp: state.needsEmotionSupport || state.needsGoalCheck,
      actions: [
        ...state.actions,
        {
          type: 'follow_up',
          data: {
            shouldFollowUp: state.needsEmotionSupport || state.needsGoalCheck,
            needsSupport: state.needsEmotionSupport,
          },
          timestamp: new Date(),
        },
      ],
    };
  }

  private async generateSupport(
    state: AgentState,
  ): Promise<Partial<AgentState>> {
    console.log(`[Agent] Generating support response`);
    let followUpMessage = '';

    if (state.needsEmotionSupport && state.detectedEmotions.length > 0) {
      const emotion = state.detectedEmotions[0];
      followUpMessage += `üíô `;

      switch (emotion.type) {
        case EmotionType.SAD:
          followUpMessage +=
            'ÌûòÎì† ÏãúÍ∞ÑÏùÑ Í≤™Í≥† Í≥ÑÏãúÎäî Í≤É Í∞ôÏïÑÏöî. Ïñ∏Ï†úÎì† Ïù¥ÏïºÍ∏∞ÌïòÍ≥† Ïã∂ÏúºÏãúÎ©¥ Îì§Ïñ¥ÎìúÎ¶¥Í≤åÏöî. ü§ó';
          break;
        case EmotionType.ANXIOUS:
          followUpMessage +=
            'Î∂àÏïàÌïòÏã† ÎßàÏùåÏù¥ ÎäêÍª¥Ï†∏Ïöî. ÍπäÍ≤å Ïà®ÏùÑ Ïâ¨Í≥† Ï≤úÏ≤úÌûà ÏÉùÍ∞ÅÌï¥Î≥¥ÏãúÎäî Í±¥ Ïñ¥Îñ®ÍπåÏöî? üå∏';
          break;
        case EmotionType.STRESSED:
          followUpMessage +=
            'ÎßéÏùÄ Ïä§Ìä∏Î†àÏä§Î•º Î∞õÍ≥† Í≥ÑÏãúÎäîÍµ∞Ïöî. Ïû†Ïãú Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏãúÎäî Í≤ÉÎèÑ Ï¢ãÍ≤†Ïñ¥Ïöî. ‚òï';
          break;
        default:
          followUpMessage +=
            'Ï†úÍ∞Ä Ïó¨Í∏∞ ÏûàÏúºÎãà Í±±Ï†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî. Ïñ∏Ï†úÎì† Ìé∏ÌïòÍ≤å ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî. üòä';
      }
    }

    if (state.needsGoalCheck && state.extractedGoals.length > 0) {
      const goal = state.extractedGoals[0];
      followUpMessage += followUpMessage ? '\n\n' : '';
      followUpMessage += `üéØ "${goal.title}" Î™©ÌëúÎ•º ÏÉàÎ°ú ÏÑ§Ï†ïÌïòÏã† Í≤É Í∞ôÎÑ§Ïöî! `;

      switch (goal.category) {
        case GoalCategory.HEALTH:
          followUpMessage +=
            'Í±¥Í∞ï Î™©ÌëúÎäî Ï†ïÎßê Ï§ëÏöîÌï¥Ïöî. ÏûëÏùÄ Î≥ÄÌôîÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥Î≥¥ÏãúÎäî Í±¥ Ïñ¥Îñ®ÍπåÏöî?';
          break;
        case GoalCategory.CAREER:
          followUpMessage +=
            'Ïª§Î¶¨Ïñ¥ Î™©ÌëúÎÑ§Ïöî! Íµ¨Ï≤¥Ï†ÅÏù∏ Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞Î©¥ Îçî ÎèÑÏõÄÏù¥ Îê† Í≤É Í∞ôÏïÑÏöî.';
          break;
        default:
          followUpMessage += 'Ïù¥ Î™©ÌëúÎ•º ÏúÑÌï¥ Ïñ¥Îñ§ Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞Í≥† Í≥ÑÏã†Í∞ÄÏöî?';
      }
    }

    return {
      followUpMessage,
      actions: [
        ...state.actions,
        {
          type: 'support',
          data: { message: followUpMessage },
          timestamp: new Date(),
        },
      ],
    };
  }

  private performEmotionAnalysis(message: string): EmotionAnalysisResult {
    const emotionKeywords = {
      [EmotionType.HAPPY]: ['Í∏∞ÏÅò', 'ÌñâÎ≥µ', 'Ï¢ã', 'Ï¶êÍ±∞', 'ÏõÉ', 'Ïã†ÎÇò'],
      [EmotionType.SAD]: ['Ïä¨ÌîÑ', 'Ïö∞Ïö∏', 'ÌûòÎì§', 'Í¥¥Î°ú', 'ÎààÎ¨º', 'Ïö∏'],
      [EmotionType.ANGRY]: ['Ìôî', 'ÏßúÏ¶ù', 'Î∂ÑÎÖ∏', 'Ïó¥Î∞õ', 'Îπ°Ïπò'],
      [EmotionType.ANXIOUS]: ['Î∂àÏïà', 'Í±±Ï†ï', 'Ï¥àÏ°∞', 'Îñ®Î¶¨', 'ÎëêÎ†§'],
      [EmotionType.STRESSED]: ['Ïä§Ìä∏Î†àÏä§', 'ÌîºÍ≥§', 'ÏßÄÏπú', 'ÌûòÎì†', 'Î∂ÄÎã¥'],
      [EmotionType.EXCITED]: ['Ïã†ÎÇò', 'Ìù•ÎØ∏', 'Í∏∞ÎåÄ', 'ÏÑ§Î†à'],
    };

    const emotions = [];

    for (const [emotionType, keywords] of Object.entries(emotionKeywords)) {
      for (const keyword of keywords) {
        if (message.includes(keyword)) {
          emotions.push({
            type: emotionType as EmotionType,
            intensity: Math.floor(Math.random() * 5) + 6,
            confidence: 0.8,
          });
          break;
        }
      }
    }

    if (emotions.length === 0) {
      emotions.push({
        type: EmotionType.CALM,
        intensity: 5,
        confidence: 0.5,
      });
    }

    return { emotions };
  }

  private performGoalExtraction(message: string): GoalExtractionResult {
    const goalKeywords = {
      [GoalCategory.HEALTH]: [
        'Îã§Ïù¥Ïñ¥Ìä∏',
        'Ïö¥Îèô',
        'Í±¥Í∞ï',
        'Ï≤¥Ï§ë',
        'Ìó¨Ïä§',
        'ÏöîÍ∞Ä',
      ],
      [GoalCategory.CAREER]: ['Ï∑®ÏóÖ', 'Ïù¥ÏßÅ', 'ÏäπÏßÑ', 'Í∞úÎ∞ú', 'Í≥µÎ∂Ä', 'ÏûêÍ≤©Ï¶ù'],
      [GoalCategory.EDUCATION]: ['Í≥µÎ∂Ä', 'ÏãúÌóò', 'ÌïôÏäµ', 'Ï±Ö', 'Í∞ïÏùò', 'ÍµêÏú°'],
      [GoalCategory.RELATIONSHIP]: ['Ïó∞Ïï†', 'Í≤∞Ìòº', 'ÏπúÍµ¨', 'Í∞ÄÏ°±', 'Í¥ÄÍ≥Ñ'],
      [GoalCategory.FINANCE]: ['Îèà', 'Ï†ÄÏ∂ï', 'Ìà¨Ïûê', 'Î∂ÄÏóÖ', 'Í≤ΩÏ†ú', 'Ïû¨Ï†ï'],
    };

    const goals = [];
    const goalPatterns = [
      /(.+)Ìï†\s*Í±∞Ïïº/g,
      /(.+)ÌïòÎ†§Í≥†\s*Ìï¥/g,
      /(.+)Ìï¥ÏïºÏßÄ/g,
      /(.+)ÌïòÍ≤†Ïñ¥/g,
      /(.+)ÏãúÏûëÌï†\s*Í±∞Ïïº/g,
    ];

    for (const pattern of goalPatterns) {
      const matches = message.match(pattern);
      if (matches) {
        for (const match of matches) {
          let category = GoalCategory.PERSONAL;
          for (const [cat, keywords] of Object.entries(goalKeywords)) {
            if (keywords.some((keyword) => match.includes(keyword))) {
              category = cat as GoalCategory;
              break;
            }
          }

          goals.push({
            title: match.trim(),
            category,
            priority: 5,
          });
        }
      }
    }

    return {
      goals,
      isUpdate: false,
    };
  }

  public async execute(
    initialState: Partial<AgentState>,
  ): Promise<Partial<AgentState>> {
    let state = { ...initialState } as AgentState;

    // ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ
    const contextResult = await this.loadUserContext(state);
    state = { ...state, ...contextResult };

    const emotionResult = await this.analyzeEmotion(state);
    state = { ...state, ...emotionResult };

    const goalResult = await this.extractGoals(state);
    state = { ...state, ...goalResult };

    const followUpResult = await this.checkFollowUp(state);
    state = { ...state, ...followUpResult };

    if (state.shouldFollowUp) {
      const supportResult = await this.generateSupport(state);
      state = { ...state, ...supportResult };
    }

    return state;
  }
}
